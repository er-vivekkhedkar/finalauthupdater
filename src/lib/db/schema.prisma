// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  fullName      String?
  image         String?
  emailVerified DateTime?
  verifyCode    String?
  verifyExpires DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Add all relations
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  profile        Profile?
  tokens         Token[]
  verifications  Verification[]
  verifyCodes    VerifyCode[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  lastUsed     DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id              String   @id
  userId          String
  credentialId    String   @unique
  providerName    String?
  providerVersion String?
  counter         BigInt
  credentialData  Bytes
  transports      String?
  createdAt       DateTime @default(now())
  lastUsed        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model Profile {
  id          String   @id @default(cuid())
  name        String?
  dateOfBirth DateTime
  gender      String
  bio         String
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}

model Token {
  id           String   @id @default(cuid())
  userId       String
  type         String
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Verification {
  id      String   @id @default(cuid())
  code    String
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verifications")
}

model VerifyCode {
  id      String   @id @default(cuid())
  code    String
  expires DateTime
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verify_codes")
}
